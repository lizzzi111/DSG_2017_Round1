install.packages("foreach")
install.packages("doParallel")
library(doParallel)
library(foreach)
foreach(i = 1:10) %do% {
print(i)
}
foreach(i = 1:1000) %do% {
print(i)
}
detectCores()
cl <- makeCluster(detectCores() - 2)
cores <- detectCores() - 2
cl <- makeCluster(cores)
registerDoParallel(cl)
foreach(i = 1:10000) %do% {
print(i)
}
foreach(i = 1:10000) %dopar% {
print(i)
}
proc.time()
t <- proc.time()
foreach(i = 1:10000) %dopar% {
print(i)
}
proc.time() - t
t <- proc.time()
foreach(i = 1:10000) %do% {
print(i)
}
proc.time() - t
t <- proc.time()
foreach(i = 1:10000) %do% {
print(i)
}
x <- proc.time() - t
t <- proc.time()
foreach(i = 1:10000) %dopar% {
print(i)
}
x1 <- proc.time() - t
x
x1
cores <- detectCores() - 2
cl <- makeCluster(cores)
registerDoParallel(cl)
t <- proc.time()
foreach(i = 1:100000) %dopar% {
print(i)
}
xpar <- proc.time() - t
t <- proc.time()
foreach(i = 1:100000) %do% {
print(i)
}
x <- proc.time() - t
xpar
x
rm(list = ls())
library(doParallel)
library(foreach)
cores <- detectCores() - 2
cl <- makeCluster(cores)
registerDoParallel(cl)
t <- proc.time()
foreach(i = 1:100000) %dopar% {
print(i)
}
xpar <- proc.time() - t
t <- proc.time()
foreach(i = 1:100000) %do% {
print(i)
}
xdo <- proc.time() - t
t <- proc.time()
for (i in 1:100000) {
print(i)
}
x <- proc.time() - t
xpar
xdo
x
rm(list = ls())
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting work directory
work.folder <- "/Users/Kozodoi/Documents/Competitions/DSG_2017"
setwd(work.folder)
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
if(require(pacman)==FALSE) install.packages("pacman")
library(pacman)
p_load(data.table, AUC, anytime, beepr, compiler)
# loading functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#       1. VALIDATION DATA        #
#                                 #
###################################
###################################
#                                 #
#       1.1. DATA PREPARATION     #
#                                 #
###################################
# loading data
data.full <- read.csv2(file.path(data.folder, "data_flow.csv"), sep = ",", dec = ".", header = T)
# converting and partitioning
data.test  <- data.full[data.full$dataset == "test",  ]
data.unknown  <- data.full[data.full$dataset == "unknown",  ]
rm(list = c("data.full", "data.train"))
# sorting the testing data
data.test$row_index <- as.numeric(as.character(data.test$row_index))
data.test <- data.test[order(data.test$row_index), ]
###################################
#                                 #
#     1.2. LOADING PREDICTIONS    #
#                                 #
###################################
# getting the list of files
file.list <- list.files("pred_valid")
preds <- list()
# loading all predictions
for (i in 1:length(file.list)) {
print(file.path("Loading ", file.list[i]))
preds[[i]] <- read.csv2(file.path("pred_valid", file.list[i]), sep = ",", dec = ".", header = T)
#preds[[i]]$row_index <- as.numeric(as.character(preds[[i]]$row_index))
#preds[[i]] <- preds[[i]][order(preds[[i]]$row_index), ]
}
# creating preddiction matrix
pred.matrix <- data.frame(dataset = data.test$dataset)
# merging all predicctions
for (i in 1:length(file.list)) {
pred.matrix <- cbind(pred.matrix, preds[[i]]$is_listened)
}
# assigning colnames
pred.matrix <- pred.matrix[, 2:ncol(pred.matrix)]
colnames(pred.matrix) <- file.list
###################################
#                                 #
#         1.3. ENSEMBLING         #
#                                 #
###################################
# extracting real values
real <- as.factor(data.test$is_listened)
# droping weak classifiers
aucs <- apply(pred.matrix, 2, function(x) auc(roc(x, real)))
good <- names(aucs)[aucs >= 0.8]
pred.matrix <- pred.matrix[, c7lnames(pred.matrix) %in% good]
# extracting number of models
k <- ncol(pred.matrix)
# mean and median predictions
pred.matrix$mean   <- apply(pred.matrix[,1:k], 1, mean)
pred.matrix$median <- apply(pred.matrix[,1:k], 1, median)
# ensemble selection
es.weights <- ES(X = pred.matrix[,1:k],  Y = real, iter = 200)
pred.matrix$es <- apply(pred.matrix[,1:k], 1, function(x) sum(x*es.weights))
# bagged ensemble selection
bes.weights <- BES(X = pred.matrix[,1:k], Y = real, iter = 200, bags = 10, p = 0.5)
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting work directory
work.folder <- "/Users/Kozodoi/Documents/Competitions/DSG_2017"
setwd(work.folder)
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
if(require(pacman)==FALSE) install.packages("pacman")
library(pacman)
p_load(data.table, AUC, anytime, beepr, compiler)
# loading functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#        1. DATA PREPARATION      #
#                                 #
###################################
# loading data
data.full <- read.csv2(file.path(data.folder, "data_flow.csv"), sep = ",", dec = ".", header = T)
# converting and partitioning
data.test  <- data.full[data.full$dataset == "test",  ]
data.unknown  <- data.full[data.full$dataset == "unknown",  ]
rm(list = c("data.full", "data.train"))
# sorting the testing data
data.test$row_index <- as.numeric(as.character(data.test$row_index))
data.test <- data.test[order(data.test$row_index), ]
# loading unknown data
data.unknown$is_listened <- NA
# sorting unknown data
data.unknown$sample_id <- as.numeric(as.character(data.unknown$sample_id))
data.unknown <- data.unknown[order(data.unknown$sample_id), ]
###################################
#                                 #
#    2. ENSEMBLING: VALIDATION    #
#                                 #
###################################
###################################
#                                 #
#     2.1. LOADING PREDICTIONS    #
#                                 #
###################################
# getting the list of files
file.list <- list.files("pred_valid")
preds <- list()
# loading all predictions
for (i in 1:length(file.list)) {
print(file.path("Loading ", file.list[i]))
preds[[i]] <- read.csv2(file.path("pred_valid", file.list[i]), sep = ",", dec = ".", header = T)
#preds[[i]]$row_index <- as.numeric(as.character(preds[[i]]$row_index))
#preds[[i]] <- preds[[i]][order(preds[[i]]$row_index), ]
}
# creating preddiction matrix
pred.matrix <- data.frame(dataset = data.test$dataset)
# merging all predicctions
for (i in 1:length(file.list)) {
pred.matrix <- cbind(pred.matrix, preds[[i]]$is_listened)
}
# assigning colnames
pred.matrix <- pred.matrix[, 2:ncol(pred.matrix)]
colnames(pred.matrix) <- file.list
###################################
#                                 #
#     2.2. BUILDING ENSEMBLES     #
#                                 #
###################################
# extracting real values
real <- as.factor(data.test$is_listened)
# droping weak classifiers [OPTIONAL]
aucs <- apply(pred.matrix, 2, function(x) auc(roc(x, real)))
good <- names(aucs)[aucs > 0.7]
pred.matrix <- pred.matrix[, colnames(pred.matrix) %in% good]
# extracting number of models
k <- ncol(pred.matrix)
# mean and median predictions
pred.matrix$mean   <- apply(pred.matrix[,1:k], 1, mean)
pred.matrix$median <- apply(pred.matrix[,1:k], 1, median)
# ensemble selection
es.weights <- ES(X = pred.matrix[,1:k],  Y = real, iter = 200)
pred.matrix$es <- apply(pred.matrix[,1:k], 1, function(x) sum(x*es.weights))
# bagged ensemble selection
bes.weights <- BES(X = pred.matrix[,1:k], Y = real, iter = 100, bags = 10, p = 0.5)
pred.matrix$bag_es <- apply(pred.matrix[,1:k], 1, function(x) sum(x*bes.weights))
# computing AUC
apply(pred.matrix, 2, function(x) auc(roc(x, real)))
# displaying ES weights
names(es.weights) <- colnames(pred.matrix)[1:length(es.weights)]
best.weights <- es.weights[es.weights > 0]
