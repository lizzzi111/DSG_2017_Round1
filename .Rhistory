install.packages("foreach")
install.packages("doParallel")
library(doParallel)
library(foreach)
foreach(i = 1:10) %do% {
print(i)
}
foreach(i = 1:1000) %do% {
print(i)
}
detectCores()
cl <- makeCluster(detectCores() - 2)
cores <- detectCores() - 2
cl <- makeCluster(cores)
registerDoParallel(cl)
foreach(i = 1:10000) %do% {
print(i)
}
foreach(i = 1:10000) %dopar% {
print(i)
}
proc.time()
t <- proc.time()
foreach(i = 1:10000) %dopar% {
print(i)
}
proc.time() - t
t <- proc.time()
foreach(i = 1:10000) %do% {
print(i)
}
proc.time() - t
t <- proc.time()
foreach(i = 1:10000) %do% {
print(i)
}
x <- proc.time() - t
t <- proc.time()
foreach(i = 1:10000) %dopar% {
print(i)
}
x1 <- proc.time() - t
x
x1
cores <- detectCores() - 2
cl <- makeCluster(cores)
registerDoParallel(cl)
t <- proc.time()
foreach(i = 1:100000) %dopar% {
print(i)
}
xpar <- proc.time() - t
t <- proc.time()
foreach(i = 1:100000) %do% {
print(i)
}
x <- proc.time() - t
xpar
x
rm(list = ls())
library(doParallel)
library(foreach)
cores <- detectCores() - 2
cl <- makeCluster(cores)
registerDoParallel(cl)
t <- proc.time()
foreach(i = 1:100000) %dopar% {
print(i)
}
xpar <- proc.time() - t
t <- proc.time()
foreach(i = 1:100000) %do% {
print(i)
}
xdo <- proc.time() - t
t <- proc.time()
for (i in 1:100000) {
print(i)
}
x <- proc.time() - t
xpar
xdo
x
rm(list = ls())
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting work directory
work.folder <- "N:/DSG2017/DSG_2017"
#work.folder <- "C:/Users/kozodoin3.hub/Desktop/DSG_2017-master"
setwd(work.folder)
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
list.of.packages <- c("stringr", "jsonlite", "textcat","anytime", "dplyr", "data.table")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only = TRUE)
# loading functions
source(file.path(code.folder, "code_0_helper_functions.R"))
load(file.path(data.folder, "data_train.Rda"))
work.folder <- "/Users/Kozodoi/Documents/Competitions/DSG_2017"
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting work directory
work.folder <- "N:/DSG2017/DSG_2017"
#work.folder <- "C:/Users/kozodoin3.hub/Desktop/DSG_2017-master"
setwd(work.folder)
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
list.of.packages <- c("stringr", "jsonlite", "textcat","anytime", "dplyr", "data.table")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only = TRUE)
# loading functions
source(file.path(code.folder, "code_0_helper_functions.R"))
load(file.path(data.folder, "data_train.Rda"))
work.folder <- "/Users/Kozodoi/Documents/Competitions/DSG_2017"
setwd(work.folder)
source(file.path(code.folder, "code_0_helper_functions.R"))
load(file.path(data.folder, "data_train.Rda"))
summary(data.train)
data.train <- data.train[, c("user_id", "ts_listen", "media_id", "album_id", "artist_id", "genre_id", "is_listened")]
sessionize = function(ts) {
delta.t = diff(ts)
is.new = c(TRUE, delta.t >= 900)
cumsum(is.new)
}
sessions = data.train %>%
group_by(user_id) %>%
arrange(ts_listen) %>%
mutate(sessionId = sessionize(ts_listen))
summary(sessions)
save(sessions, file = file.path(data.folder, "data_train_sessions.Rda"))
class(sessions)
sessions <- as.data.frame(sessions)
save(sessions, file = file.path(data.folder, "session_id_vector.Rda"))
save(sessions, file = file.path(data.folder, "data_train_sessions.Rda"))
class(sessions)
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting work directory
work.folder <- "/Users/Kozodoi/Documents/Competitions/DSG_2017"
#work.folder <- "C:/Users/kozodoin3.hub/Desktop/DSG_2017"
setwd(work.folder)
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
list.of.packages <- c("stringr", "jsonlite", "textcat","anytime", "dplyr", "data.table")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only = TRUE)
# loading functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#        COMPUTING FEATURES       #
#                                 #
###################################
# loading data
load(file.path(data.folder, "data_train_sessions.Rda"))
# droping first sessions
sessions <- sessions[sessions$sessionId > 1, ]
# list of users
user_list <- sort(unique(sessions$user_id))
# setting max sessions per user
max_sessions <- 5
# the master loop
data <- data.frame()
for (user in user_list) {
# extracting sessions
ses <- unique(sessions$sessionId[sessions$user_id == user])
# keeping last sessions
if (length(ses) > max_sessions) {
ses <- ses[(length(ses)-max_sessions+1):length(ses)]
}
# loop for data creation
for (s in ses) {
# displaying user ans session name
print(paste0("User ", user, ", session ", s))
# partitioning data
train_full <- sessions[sessions$user_id == user & sessions$sessionId <  s,     ]
train_last <- sessions[sessions$user_id == user & sessions$sessionId == (s-1), ]
valid      <- sessions[sessions$user_id == user & sessions$sessionId == s,     ]
# computing features
valid <- compute_features_dt(train_full, valid)
valid$ratio_per_user_last <- mean(as.numeric(train_last$is_listened)-1)
data <- rbind(data, valid)
}
}
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting work directory
work.folder <- "/Users/Kozodoi/Documents/Competitions/DSG_2017"
#work.folder <- "C:/Users/kozodoin3.hub/Desktop/DSG_2017"
setwd(work.folder)
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
list.of.packages <- c("stringr", "jsonlite", "textcat","anytime", "dplyr", "data.table")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only = TRUE)
# loading functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#        COMPUTING FEATURES       #
#                                 #
###################################
# loading data
load(file.path(data.folder, "data_train_sessions.Rda"))
# droping first sessions
sessions <- sessions[sessions$sessionId > 1, ]
# list of users
user_list <- sort(unique(sessions$user_id))
# setting max sessions per user
max_sessions <- 5
# the master loop
data <- data.frame()
for (user in user_list) {
# extracting sessions
ses <- unique(sessions$sessionId[sessions$user_id == user])
# keeping last sessions
if (length(ses) > max_sessions) {
ses <- ses[(length(ses)-max_sessions+1):length(ses)]
}
# loop for data creation
for (s in ses) {
# displaying user ans session name
print(paste0("User ", user, ", session ", s))
# partitioning data
train_full <- sessions[sessions$user_id == user & sessions$sessionId <  s,     ]
train_last <- sessions[sessions$user_id == user & sessions$sessionId == (s-1), ]
valid      <- sessions[sessions$user_id == user & sessions$sessionId == s,     ]
# computing features
valid <- compute_features_dt(train_full, valid)
valid$ratio_per_user_last <- mean(as.numeric(train_last$is_listened)-1)
data <- rbind(data, valid)
}
}
