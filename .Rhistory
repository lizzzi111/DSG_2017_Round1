install.packages("foreach")
install.packages("doParallel")
library(doParallel)
library(foreach)
foreach(i = 1:10) %do% {
print(i)
}
foreach(i = 1:1000) %do% {
print(i)
}
detectCores()
cl <- makeCluster(detectCores() - 2)
cores <- detectCores() - 2
cl <- makeCluster(cores)
registerDoParallel(cl)
foreach(i = 1:10000) %do% {
print(i)
}
foreach(i = 1:10000) %dopar% {
print(i)
}
proc.time()
t <- proc.time()
foreach(i = 1:10000) %dopar% {
print(i)
}
proc.time() - t
t <- proc.time()
foreach(i = 1:10000) %do% {
print(i)
}
proc.time() - t
t <- proc.time()
foreach(i = 1:10000) %do% {
print(i)
}
x <- proc.time() - t
t <- proc.time()
foreach(i = 1:10000) %dopar% {
print(i)
}
x1 <- proc.time() - t
x
x1
cores <- detectCores() - 2
cl <- makeCluster(cores)
registerDoParallel(cl)
t <- proc.time()
foreach(i = 1:100000) %dopar% {
print(i)
}
xpar <- proc.time() - t
t <- proc.time()
foreach(i = 1:100000) %do% {
print(i)
}
x <- proc.time() - t
xpar
x
rm(list = ls())
library(doParallel)
library(foreach)
cores <- detectCores() - 2
cl <- makeCluster(cores)
registerDoParallel(cl)
t <- proc.time()
foreach(i = 1:100000) %dopar% {
print(i)
}
xpar <- proc.time() - t
t <- proc.time()
foreach(i = 1:100000) %do% {
print(i)
}
xdo <- proc.time() - t
t <- proc.time()
for (i in 1:100000) {
print(i)
}
x <- proc.time() - t
xpar
xdo
x
rm(list = ls())
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting work directory
work.folder <- "/Users/Kozodoi/Documents/Competitions/DSG_2017"
#work.folder <- "C:/Users/kozodoin3.hub/Desktop/DSG_2017"
setwd(work.folder)
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
library(anytime)
# loading functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#       NAIVE MODEL (RATIOS)      #
#                                 #
###################################
##### 1. PREPARATIONS
# loading data sets
load(file.path(data.folder, "data_train.Rda"))
load(file.path(data.folder, "data_test.Rda"))
# converting variable to numeric
data.train$is_listened <- as.numeric(data.train$is_listened) - 1
# adding simple counter
data.train$count <- 1
1
2
table(data.train$listen_type)
data.train <- data.train[data.train$listen_type == 1, ]
user.ratio   <- aggregate(is_listened ~ user_id,             data.train, mean)
data.test$user_ratio   <- merge(data.test[, c("sample_id", "user_id")],              user.ratio,   sort = F, all.x = T)$is_listened
summary(data.test$user_ratio)
# loading data sets
load(file.path(data.folder, "data_train.Rda"))
load(file.path(data.folder, "data_test.Rda"))
# converting variable to numeric
data.train$is_listened <- as.numeric(data.train$is_listened) - 1
# adding simple counter
data.train$count <- 1
user.ratio   <- aggregate(is_listened ~ user_id,             data.train, mean)
data.test$user_ratio   <- merge(data.test[, c("sample_id", "user_id")],              user.ratio,   sort = F, all.x = T)$is_listened
data.train <- data.train[data.train$listen_type == 1, ]
user.ratio.flow   <- aggregate(is_listened ~ user_id,             data.train, mean)
data.test$user_ratio   <- merge(data.test[, c("sample_id", "user_id")],              user.ratio.flow,   sort = F, all.x = T)$is_listened
summary(data.test$user_ratio)
##### 1. PREPARATIONS
# loading data sets
load(file.path(data.folder, "data_train.Rda"))
load(file.path(data.folder, "data_test.Rda"))
# converting variable to numeric
data.train$is_listened <- as.numeric(data.train$is_listened) - 1
# adding simple counter
data.train$count <- 1
user.ratio   <- aggregate(is_listened ~ user_id,             data.train, mean)
data.test$user_ratio   <- merge(data.test[, c("sample_id", "user_id")],              user.ratio,   sort = F, all.x = T)$is_listened
data.train <- data.train[data.train$listen_type == 1, ]
user.ratio   <- aggregate(is_listened ~ user_id,             data.train, mean)
data.test$user_ratio_flow   <- merge(data.test[, c("sample_id", "user_id")],              user.ratio,   sort = F, all.x = T)$is_listened
summary(data.test$user_ratio)
summary(data.test$user_ratio_flow)
data.test$user_ratio_flow[is.na(data.test$user_ratio_flow)]
data.test$user_ratio_flow[is.na(data.test$user_ratio_flow)] <- data.test$user_ratio[is.na(data.test$user_ratio_flow)]
summary(data.test$user_ratio_flow)
summary(data.test$user_ratio)
submit(data.test$user_ratio_flow,   data = data.test, folder = subm.folder, file = "naive_ratio_user_flow.csv")
