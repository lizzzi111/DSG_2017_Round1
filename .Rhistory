source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#         DATA PARTITIONING       #
#                                 #
###################################
# loading data sets
load(file.path(data.folder, "data_train.Rda"))
# data partitioning
data.train <- data.train[1:100000, ]
data.train <- data.train[data.train$is_listened == 1, ]
# converting variable to numeric
data.train$is_listened <- as.numeric(data.train$is_listened)
# computing play/skip ratio by user-artist
user.artist.count <- aggregate(is_listened ~ user_id + genre_id, data.train, sum)
# droping factor levels
user.artist.count$genre_id <- droplevels(user.artist.count$genre_id)
# reshaping
kk <- reshape(user.artist.count, idvar = "user_id", timevar = "genre_id", direction = "wide")
kk[is.na(kk)] <- 0
kk <- as.matrix(kk)
kk <- apply(kk, 2, as.numeric)
# compute correlations
cor(kk[1,], kk[2, ])
data.germany <- as.data.frame(kk)
names(data.germany)[1] <- "user"
# Drop any column named "user"
data.germany.ibs <- (data.germany[,!(names(data.germany) %in% c("user"))])
# Create a helper function to calculate the cosine between two vectors
getCosine <- function(x,y)
{
this.cosine <- sum(x*y) / (sqrt(sum(x*x)) * sqrt(sum(y*y)))
return(this.cosine)
}
# Create a placeholder dataframe listing item vs. item
data.germany.ibs.similarity  <- matrix(NA, nrow=ncol(data.germany.ibs),ncol=ncol(data.germany.ibs),dimnames=list(colnames(data.germany.ibs),colnames(data.germany.ibs)))
# Lets fill in those empty spaces with cosine similarities
# Loop through the columns
for(i in 1:ncol(data.germany.ibs)) {
print(i)
# Loop through the columns for each column
for(j in 1:ncol(data.germany.ibs)) {
# Fill in placeholder with cosine similarities
data.germany.ibs.similarity[i,j] <- getCosine(as.matrix(data.germany.ibs[i]),as.matrix(data.germany.ibs[j]))
}
}
# Back to dataframe
data.germany.ibs.similarity <- as.data.frame(data.germany.ibs.similarity)
data.germany.ibs.similarity[1:10, 1:10]
data.germany.neighbours <- matrix(NA, nrow=ncol(data.germany.ibs.similarity),ncol=11,dimnames=list(colnames(data.germany.ibs.similarity)))
for(i in 1:ncol(data.germany.ibs))
{
print(i)
data.germany.neighbours[i,] <- (t(head(n=11,rownames(data.germany.ibs.similarity[order(data.germany.ibs.similarity[,i],decreasing=TRUE),][i]))))
}
data.germany.neighbours[1:3, 1:5]
# Lets make a helper function to calculate the scores
getScore <- function(history, similarities)
{
x <- sum(history*similarities)/sum(similarities)
x
}
holder <- matrix(NA, nrow=nrow(data.germany),ncol=ncol(data.germany)-1,dimnames=list((data.germany$user),colnames(data.germany[-1])))
# Loop through the users (rows)
for(i in 1:nrow(holder))
{
print(i)
# Loops through the products (columns)
for(j in 1:ncol(holder))
{
# Get the user's name and th product's name
# We do this not to conform with vectors sorted differently
user <- rownames(holder)[i]
product <- colnames(holder)[j]
# We do not want to recommend products you have already consumed
# If you have already consumed it, we store an empty string
if(as.integer(data.germany[data.germany$user==user,product]) == 1)
{
holder[i,j]<-""
} else {
# We first have to get a product's top 10 neighbours sorted by similarity
topN<-((head(n=11,(data.germany.ibs.similarity[order(data.germany.ibs.similarity[,product],decreasing=TRUE),][product]))))
topN.names <- as.character(rownames(topN))
topN.similarities <- as.numeric(topN[,1])
# Drop the first one because it will always be the same song
topN.similarities<-topN.similarities[-1]
topN.names<-topN.names[-1]
# We then get the user's purchase history for those 10 items
topN.purchases<- data.germany[,c("user",topN.names)]
topN.userPurchases<-topN.purchases[topN.purchases$user==user,]
topN.userPurchases <- as.numeric(topN.userPurchases[!(names(topN.userPurchases) %in% c("user"))])
# We then calculate the score for that product and that user
holder[i,j]<-getScore(similarities=topN.similarities,history=topN.userPurchases)
} # close else statement
} # end product for loop
} # end user for loop
holder[1:10, 1:10]
data.germany <- as.data.frame(kk)
names(data.germany)[1] <- "user"
# Drop any column named "user"
data.germany.ibs <- (data.germany[,!(names(data.germany) %in% c("user"))])
# Create a helper function to calculate the cosine between two vectors
getCosine <- function(x,y)
{
this.cosine <- sum(x*y) / (sqrt(sum(x*x)) * sqrt(sum(y*y)))
return(this.cosine)
}
# Create a placeholder dataframe listing item vs. item
data.germany.ibs.similarity <- matrix(NA, nrow=ncol(data.germany.ibs),ncol=ncol(data.germany.ibs),dimnames=list(colnames(data.germany.ibs),colnames(data.germany.ibs)))
data.germany.ibs[1:10, 1:10]
data.germany.ibs[1]
data.germany.ibs[i,]
# Loop through the rows
for(i in 1:nrow(data.germany.ibs)) {
print(i)
# Loop through the columns for each column
for(j in 1:nrow(data.germany.ibs)) {
# Fill in placeholder with cosine similarities
data.germany.ibs.similarity[i,j] <- getCosine(as.matrix(data.germany.ibs[i,]), as.matrix(data.germany.ibs[j, ]))
}
}
head(data.germany.ibs, )
data.germany.ibs[1:10, 1:10]
kk[1:10, 1:10]
dim(kk)
# Drop any column named "user"
similarity <- matrix(NA, nrow = nrow(data.germany), ncol = nrow(data.germany))
rownames(similarity) <- data.germany$user
colnames(similarity) <- data.germany$user
similarity[1:10, 1:10]
# Loop through the rows
for(i in 1:nrow(data.germany.ibs)) {
print(i)
# Loop through the columns for each column
for(j in 1:nrow(data.germany.ibs)) {
# Fill in placeholder with cosine similarities
similarity[i,j] <- getCosine(as.matrix(data.germany.ibs[i,]), as.matrix(data.germany.ibs[j, ]))
}
}
# Loop through the rows
for(i in 1:nrow(data.germany.ibs)) {
# Loop through the columns for each column
for(j in 1:nrow(data.germany.ibs)) {
print(paste0(i, "-", j))
# Fill in placeholder with cosine similarities
similarity[i,j] <- getCosine(as.matrix(data.germany.ibs[i,]), as.matrix(data.germany.ibs[j, ]))
}
}
suimilarit[1:10, 1:10]
suimilarity[1:10, 1:10]
similarity[1:10, 1:10]
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting work directory
work.folder <- "/Users/Kozodoi/Documents/Competitions/DSG_2017"
#work.folder <- "C:/Users/kozodoin3.hub/Desktop/DSG_2017-master"
setwd(work.folder)
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
library(anytime)
# loading functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#         DATA PARTITIONING       #
#                                 #
###################################
# loading data sets
load(file.path(data.folder, "data_train.Rda"))
# data partitioning
data.train <- data.train[1:10000, ]
data.train <- data.train[data.train$is_listened == 1, ]
# converting variable to numeric
data.train$is_listened <- as.numeric(data.train$is_listened)
# computing play/skip ratio by user-artist
user.artist.count <- aggregate(is_listened ~ user_id + genre_id, data.train, sum)
# droping factor levels
user.artist.count$genre_id <- droplevels(user.artist.count$genre_id)
# reshaping
kk <- reshape(user.artist.count, idvar = "user_id", timevar = "genre_id", direction = "wide")
kk[is.na(kk)] <- 0
kk <- as.matrix(kk)
kk <- apply(kk, 2, as.numeric)
data.germany <- as.data.frame(kk)
# Drop any column named "user"
data.germany.ibs <- (data.germany[,!(names(data.germany) %in% c("user_id")])
# user similarity matrix
similarity <- matrix(NA, nrow = nrow(data.germany), ncol = nrow(data.germany))
rownames(similarity) <- data.germany$user
colnames(similarity) <- data.germany$user
# create a helper function to calculate the cosine between two vectors
getCosine <- function(x,y)
{
this.cosine <- sum(x*y) / (sqrt(sum(x*x)) * sqrt(sum(y*y)))
return(this.cosine)
}
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting work directory
work.folder <- "/Users/Kozodoi/Documents/Competitions/DSG_2017"
#work.folder <- "C:/Users/kozodoin3.hub/Desktop/DSG_2017-master"
setwd(work.folder)
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
library(anytime)
# loading functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#         DATA PARTITIONING       #
#                                 #
###################################
# loading data sets
load(file.path(data.folder, "data_train.Rda"))
# data partitioning
data.train <- data.train[1:10000, ]
data.train <- data.train[data.train$is_listened == 1, ]
# converting variable to numeric
data.train$is_listened <- as.numeric(data.train$is_listened)
# computing play/skip ratio by user-artist
user.artist.count <- aggregate(is_listened ~ user_id + genre_id, data.train, sum)
# droping factor levels
user.artist.count$genre_id <- droplevels(user.artist.count$genre_id)
# reshaping
kk <- reshape(user.artist.count, idvar = "user_id", timevar = "genre_id", direction = "wide")
kk[is.na(kk)] <- 0
kk <- as.matrix(kk)
kk <- apply(kk, 2, as.numeric)
data.germany <- as.data.frame(kk)
# Drop any column named "user"
data.germany.ibs <- (data.germany[,!(names(data.germany) %in% c("user_id"))])
# user similarity matrix
similarity <- matrix(NA, nrow = nrow(data.germany), ncol = nrow(data.germany))
rownames(similarity) <- data.germany$user
colnames(similarity) <- data.germany$user
# create a helper function to calculate the cosine between two vectors
getCosine <- function(x,y)
{
this.cosine <- sum(x*y) / (sqrt(sum(x*x)) * sqrt(sum(y*y)))
return(this.cosine)
}
for(i in 1:nrow(data.germany.ibs)) {
for(j in 1:nrow(data.germany.ibs)) {
print(paste0(i, "-", j))
similarity[i,j] <- getCosine(as.matrix(data.germany.ibs[i,]), as.matrix(data.germany.ibs[j, ]))
}
}
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting work directory
work.folder <- "/Users/Kozodoi/Documents/Competitions/DSG_2017"
#work.folder <- "C:/Users/kozodoin3.hub/Desktop/DSG_2017-master"
setwd(work.folder)
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
library(anytime)
# loading functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#         DATA PARTITIONING       #
#                                 #
###################################
# loading data sets
load(file.path(data.folder, "data_train.Rda"))
# data partitioning
data.train <- data.train[1:1000, ]
data.train <- data.train[data.train$is_listened == 1, ]
# converting variable to numeric
data.train$is_listened <- as.numeric(data.train$is_listened)
# computing play/skip ratio by user-artist
user.artist.count <- aggregate(is_listened ~ user_id + artist_id, data.train, sum)
# droping factor levels
user.artist.count$artist_id <- droplevels(user.artist.count$artist_id)
# reshaping
kk <- reshape(user.artist.count, idvar = "user_id", timevar = "artist_id", direction = "wide")
kk[is.na(kk)] <- 0
kk <- as.matrix(kk)
kk <- apply(kk, 2, as.numeric)
data.germany <- as.data.frame(kk)
# Drop any column named "user"
data.germany.ibs <- (data.germany[, !(names(data.germany) %in% c("user_id"))])
# user similarity matrix
similarity <- matrix(NA, nrow = nrow(data.germany), ncol = nrow(data.germany))
rownames(similarity) <- data.germany$user
colnames(similarity) <- data.germany$user
# create a helper function to calculate the cosine between two vectors
getCosine <- function(x,y)
{
this.cosine <- sum(x*y) / (sqrt(sum(x*x)) * sqrt(sum(y*y)))
return(this.cosine)
}
# Loop through the rows
for(i in 1:nrow(data.germany.ibs)) {
for(j in 1:nrow(data.germany.ibs)) {
print(paste0(i, "-", j))
similarity[i,j] <- getCosine(as.matrix(data.germany.ibs[i,]), as.matrix(data.germany.ibs[j, ]))
}
}
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting work directory
work.folder <- "/Users/Kozodoi/Documents/Competitions/DSG_2017"
#work.folder <- "C:/Users/kozodoin3.hub/Desktop/DSG_2017-master"
setwd(work.folder)
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
library(anytime)
# loading functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#         DATA PARTITIONING       #
#                                 #
###################################
# loading data sets
load(file.path(data.folder, "data_train.Rda"))
# data partitioning
data.train <- data.train[1:1000, ]
data.train <- data.train[data.train$is_listened == 1, ]
# converting variable to numeric
data.train$is_listened <- as.numeric(data.train$is_listened)
# computing play/skip ratio by user-artist
user.artist.count <- aggregate(is_listened ~ user_id + artist_id, data.train, sum)
# droping factor levels
user.artist.count$artist_id <- droplevels(user.artist.count$artist_id)
# reshaping
kk <- reshape(user.artist.count, idvar = "user_id", timevar = "artist_id", direction = "wide")
kk[is.na(kk)] <- 0
kk <- as.matrix(kk)
kk <- apply(kk, 2, as.numeric)
data.germany <- as.data.frame(kk)
# Drop any column named "user"
data.germany.ibs <- (data.germany[, !(names(data.germany) %in% c("user_id"))])
# user similarity matrix
similarity <- matrix(NA, nrow = nrow(data.germany), ncol = nrow(data.germany))
rownames(similarity) <- data.germany$user
colnames(similarity) <- data.germany$user
# create a helper function to calculate the cosine between two vectors
getCosine <- function(x,y)
{
this.cosine <- sum(x*y) / (sqrt(sum(x*x)) * sqrt(sum(y*y)))
return(this.cosine)
}
# Loop through the rows
for(i in 1:nrow(data.germany.ibs)) {
for(j in 1:nrow(data.germany.ibs)) {
print(paste0(i, "-", j))
similarity[i,j] <- getCosine(as.matrix(data.germany.ibs[i,]), as.matrix(data.germany.ibs[j, ]))
}
}
# Back to dataframe
similarity <- as.data.frame(similarity)
similarity[1:10, 1:10]
summary(similarity)
similarity[1:100, 1:10]
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting work directory
work.folder <- "/Users/Kozodoi/Documents/Competitions/DSG_2017"
#work.folder <- "C:/Users/kozodoin3.hub/Desktop/DSG_2017-master"
setwd(work.folder)
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
library(anytime)
# loading functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#         DATA PARTITIONING       #
#                                 #
###################################
# loading data sets
load(file.path(data.folder, "data_train.Rda"))
# data partitioning
data.train <- data.train[1:10000, ]
data.train <- data.train[data.train$is_listened == 1, ]
# converting variable to numeric
data.train$is_listened <- as.numeric(data.train$is_listened)
# computing play/skip ratio by user-artist
user.artist.count <- aggregate(is_listened ~ user_id + artist_id, data.train, sum)
# droping factor levels
user.artist.count$artist_id <- droplevels(user.artist.count$artist_id)
# reshaping
history <- reshape(user.artist.count, idvar = "user_id", timevar = "artist_id", direction = "wide")
history[is.na(history)] <- 0
history <- as.matrix(history)
history <- apply(history, 2, as.numeric)
history <- as.data.frame(history)
# drop user_id
history.ubs <- (history[, !(names(history) %in% c("user_id"))])
# user similarity matrix
similarity <- matrix(NA, nrow = nrow(history), ncol = nrow(history))
rownames(similarity) <- history$user
colnames(similarity) <- history$user
# create a helper function to calculate the cosine between two vectors
getCosine <- function(x,y)
{
this.cosine <- sum(x*y) / (sqrt(sum(x*x)) * sqrt(sum(y*y)))
return(this.cosine)
}
# loop through the rows
for(i in 1:nrow(history.ubs)) {
for(j in 1:nrow(history.ubs)) {
print(paste0(i, "-", j))
similarity[i,j] <- getCosine(as.matrix(history.ubs[i,]), as.matrix(history.ubs[j, ]))
}
}
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting work directory
work.folder <- "/Users/Kozodoi/Documents/Competitions/DSG_2017"
#work.folder <- "C:/Users/kozodoin3.hub/Desktop/DSG_2017-master"
setwd(work.folder)
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
library(anytime)
# loading functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#         DATA PARTITIONING       #
#                                 #
###################################
# loading data sets
load(file.path(data.folder, "data_train.Rda"))
# keeping only played tracks
data.train <- data.train[data.train$is_listened == 1, ]
data.train <- data.train[1:1000, ]
# converting variable to numeric
data.train$is_listened <- as.numeric(data.train$is_listened)
# computing play count by user-artist
user.artist.count <- aggregate(is_listened ~ user_id + artist_id, data.train, sum)
# droping factor levels
user.artist.count$artist_id <- droplevels(user.artist.count$artist_id)
# reshaping the data
history <- reshape(user.artist.count, idvar = "user_id", timevar = "artist_id", direction = "wide")
history[is.na(history)] <- 0
history <- apply(history, 2, as.numeric)
history <- as.data.frame(history)
# drop user_id
history.ubs <- (history[, !(names(history) %in% c("user_id"))])
# user similarity matrix
similarity <- matrix(NA, nrow = nrow(history), ncol = nrow(history))
rownames(similarity) <- history$user
colnames(similarity) <- history$user
# create a helper function to calculate the cosine between two vectors
getCosine <- function(x,y) {
this.cosine <- sum(x*y) / (sqrt(sum(x*x)) * sqrt(sum(y*y)))
return(this.cosine)
}
# loop through the rows
for (i in 1:nrow(history.ubs)) {
for (j in 1:nrow(history.ubs)) {
print(paste0(i, "-", j))
similarity[i,j] <- getCosine(as.matrix(history.ubs[i,]), as.matrix(history.ubs[j, ]))
}
}
