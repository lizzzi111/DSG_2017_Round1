###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting work directory
work.folder <- "/Users/Kozodoi/Documents/Competitions/DSG_2017"
setwd(work.folder)
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
library(anytime)
# loading functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#        NAIVE MODEL (ARTIST)     #
#                                 #
###################################
# loading data sets
load(file.path(data.folder, "data_train.Rda"))
load(file.path(data.folder, "data_test.Rda"))
data = data.train
users <- levels(data$user_id)
users
length(users)
id = users[1]
print(paste0(id, "/", length(users)))
history <- data[data$user_id = id, ]
history <- data[data$user_id == id, ]
summary(history)
table(history$genre_id)
length(table(history$genre_id))
play_skip
play_skip <- mean(history$is_listened)
play_skip
table(history$genre_id)/nrow(history)
genres <- table(history$genre_id)/nrow(history)
genres
table(history$artist_id)/nrow(history)
age <- mean(history$user_age)
age    <- unique(history$user_age)
gender <- unique(history$user_gender)
user.data <- data.frame(age = age, gender = gender, play_skip = play_skip)
genres
names(genres)
names(genres) <- paste0("genre_", names(genres))
# displaying user ID
print(paste0(id, "/", length(users)))
# extracting musical history
history <- data[data$user_id == id, ]
# counting play/skip ratio
play_skip <- mean(history$is_listened)
# counting genre shares
genres <- table(history$genre_id)/nrow(history)
names(genres) <- paste0("genre_", names(genres))
# counting artist shares
artists <- table(history$artist_id)/nrow(history)
names(artists) <- paste0("artist_", names(artists))
# age and gender
age    <- unique(history$user_age)
gender <- unique(history$user_gender)
user.data <- cbind(user.data, genres, artists)
genres
user.data
genres <- as.matrix(table(history$genre_id)/nrow(history))
genres
?as.matrix
genres <- as.matrix(table(history$genre_id)/nrow(history), nrow = 1)
colnames(genres) <- paste0("genre_", colnames(genres))
genre
genres
genres <- t(as.matrix(table(history$genre_id)/nrow(history)))
colnames(genres) <- paste0("genre_", colnames(genres))
genres
artists <- t(as.matrix(table(history$artist_id)/nrow(history)))
colnames(artists) <- paste0("artist_", colnames(artists))
age    <- unique(history$user_age)
gender <- unique(history$user_gender)
user.data <- data.frame(age = age, gender = gender, play_skip = play_skip)
user.data <- cbind(user.data, genres, artists)
user.data <- data.frame()
print(paste0(id, "/", length(users)))
# extracting musical history
history <- data[data$user_id == id, ]
# counting play/skip ratio
play_skip <- mean(history$is_listened)
# counting genre shares
genres <- t(as.matrix(table(history$genre_id)/nrow(history)))
colnames(genres) <- paste0("genre_", colnames(genres))
# counting artist shares
artists <- t(as.matrix(table(history$artist_id)/nrow(history)))
colnames(artists) <- paste0("artist_", colnames(artists))
# age and gender
age    <- unique(history$user_age)
gender <- unique(history$user_gender)
# building the data frame
new.data <- data.frame(user_id = id, age = age, gender = gender, play_skip = play_skip)
new.data <- cbind(new.data, genres, artists)
user.data <- rbind(user.data, new.data)
##### function to extract features
extract_features <- function(data) {
# extracting user IDs
users <- levels(data$user_id)
# creating a data frame
user.data <- data.frame()
# feature creation loop
for (id in users) {
# displaying user ID
print(paste0(id, "/", length(users)))
# extracting musical history
history <- data[data$user_id == id, ]
# counting play/skip ratio
play_skip <- mean(history$is_listened)
# counting total songs
songs <- nrow(history)
# counting genre shares
genres <- t(as.matrix(table(history$genre_id)/nrow(history)))
colnames(genres) <- paste0("genre_", colnames(genres))
# counting artist shares
artists <- t(as.matrix(table(history$artist_id)/nrow(history)))
colnames(artists) <- paste0("artist_", colnames(artists))
# age and gender
age    <- unique(history$user_age)
gender <- unique(history$user_gender)
# building the data frame
new.data <- data.frame(user_id = id, age = age, gender = gender, play_skip = play_skip, songs = songs)
new.data <- cbind(new.data, genres, artists)
# merging with previous users
user.data <- rbind(user.data, new.data)
}
# converting factors
user.data$user_id <- as.factor(user.data$user_id)
user.data$gender  <- as.factor(user.data$gender)
# returning the data
return(user.data)
}
data.train <- data.train[1:100000, ]
k <- extract_features(data.train)
data.train$user_id <- droplevels(data.train$user_id)
levels(data.train$user_id)
data.train <- data.train[1:10000, ]
data.train$user_id <- droplevels(data.train$user_id)
levels(data.train$user_id)
# loading data sets
load(file.path(data.folder, "data_train.Rda"))
load(file.path(data.folder, "data_test.Rda"))
# keeping the genre data
data.train <- data.train[, c("user_id", "sample_id", "is_listened")]
data.test  <- data.test[,  c("user_id", "sample_id", "is_listened")]
# empty prediction vector
naive.pred <- rep(NA, nrow(data.test))
i = 1
# displaying observation number
print(paste0(i, "/", nrow(data.test)))
# extracting user
user  <- data.test$user_id[i]
# extracting play/skip history of a user
history <- data.train$is_listened[data.train$is_listened == user]
mean(history)
history
user
history <- data.train$is_listened[data.train$user_id == user]
history
mean(plays)
plays <- data.train$is_listened[data.train$user_id == user]
play_skip <- mean(plays)
# loading data sets
load(file.path(data.folder, "data_train.Rda"))
load(file.path(data.folder, "data_test.Rda"))
# keeping the genre data
data.train <- data.train[, c("user_id", "sample_id", "is_listened")]
data.test  <- data.test[,  c("user_id", "sample_id", "is_listened")]
# empty prediction vector
naive.pred <- rep(NA, nrow(data.test))
# checking the share of each genre
for (i in 1:nrow(data.test)) {
# displaying observation number
print(paste0(i, "/", nrow(data.test)))
# extracting user
user <- data.test$user_id[i]
# extracting play/skip history of a user
plays <- data.train$is_listened[data.train$user_id == user]
# predicting as play/skip ratio
naive.pred[i] <- mean(plays)
}
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting work directory
work.folder <- "/Users/Kozodoi/Documents/Competitions/DSG_2017"
setwd(work.folder)
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
library(anytime)
# loading functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#        NAIVE MODEL (RATIO)      #
#                                 #
###################################
# loading data sets
load(file.path(data.folder, "data_train.Rda"))
load(file.path(data.folder, "data_test.Rda"))
# keeping the genre data
data.train <- data.train[, c("user_id", "sample_id", "media_id", "is_listened")]
data.test  <- data.test[,  c("user_id", "sample_id", "media_id", "is_listened")]
# empty prediction vector
naive.pred <- rep(NA, nrow(data.test))
unique(data.test$user_id)
id = unique(data.test$user_id)[1]
id
print(paste0(id, "/", length(unique(data.test$user_id))))
print(paste0(id, "/", which(unique(data.test$user_id) == id)))
print(paste0(which(unique(data.test$user_id) == id), "/", length(unique(data.test$user_id))))
plays <- data.train$is_listened[data.train$user_id == id]
plays
data.test$play_skip[data.test$user_id == id]
data.test$play_skip
data.test$play_skip <- NA
data.test$play_skip
data.test$play_skip[data.test$user_id == id] <
data.test$play_skip[data.test$user_id == id]
data.test$play_skip[data.test$user_id == id] <- mean(plays)
song = unique(data.test$media_id)[1]
print(paste0(which(unique(data.test$media_id) == song), "/", length(unique(data.test$media_id))))
plays <- data.train$is_listened[data.train$media_id == song]
plays
data.test$play_skip_user <- NA
data.test$play_skip_song <- NA
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting work directory
work.folder <- "/Users/Kozodoi/Documents/Competitions/DSG_2017"
setwd(work.folder)
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
library(anytime)
# loading functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#        NAIVE MODEL (RATIO)      #
#                                 #
###################################
# loading data sets
load(file.path(data.folder, "data_train.Rda"))
load(file.path(data.folder, "data_test.Rda"))
# keeping the genre data
data.train <- data.train[, c("user_id", "sample_id", "media_id", "is_listened")]
data.test  <- data.test[,  c("user_id", "sample_id", "media_id", "is_listened")]
# empty variables
data.test$play_skip_user <- NA
data.test$play_skip_song <- NA
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting work directory
work.folder <- "/Users/Kozodoi/Documents/Competitions/DSG_2017"
setwd(work.folder)
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
library(anytime)
# loading functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#        NAIVE MODEL (RATIO)      #
#                                 #
###################################
# loading data sets
load(file.path(data.folder, "data_train.Rda"))
load(file.path(data.folder, "data_test.Rda"))
# keeping the genre data
data.train <- data.train[, c("user_id", "sample_id", "media_id", "is_listened")]
data.test  <- data.test[,  c("user_id", "sample_id", "media_id", "is_listened")]
# empty variables
data.test$play_skip_user <- NA
data.test$play_skip_song <- NA
### computing play/skip ratio of each user
for (id in unique(data.test$user_id)) {
# displaying user ID
print(paste0(which(unique(data.test$user_id) == id), "/", length(unique(data.test$user_id))))
# extracting play/skip history
plays <- data.train$is_listened[data.train$user_id == id]
# saving play/skip ratio
data.test$play_skip_user[data.test$user_id == id] <- mean(plays)
}
### computing play/skip ratio of each song
for (song in unique(data.test$media_id)) {
# displaying song ID
print(paste0(which(unique(data.test$media_id) == song), "/", length(unique(data.test$media_id))))
# extracting play/skip history
plays <- data.train$is_listened[data.train$media_id == song]
# saving play/skip ratio
data.test$play_skip_song[data.test$media_id == song] <- mean(plays)
}
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting work directory
work.folder <- "/Users/Kozodoi/Documents/Competitions/DSG_2017"
setwd(work.folder)
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
library(anytime)
# loading functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#        NAIVE MODEL (RATIO)      #
#                                 #
###################################
# loading data sets
load(file.path(data.folder, "data_train.Rda"))
load(file.path(data.folder, "data_test.Rda"))
# keeping the genre data
data.train <- data.train[, c("user_id", "sample_id", "media_id", "is_listened")]
data.test  <- data.test[,  c("user_id", "sample_id", "media_id", "is_listened")]
# empty variables
data.test$play_skip_user <- NA
data.test$play_skip_song <- NA
### computing play/skip ratio of each user
for (id in unique(data.test$user_id)) {
# displaying user ID
print(paste0(which(unique(data.test$user_id) == id), "/", length(unique(data.test$user_id))))
# extracting play/skip history
plays <- data.train$is_listened[data.train$user_id == id]
# saving play/skip ratio
data.test$play_skip_user[data.test$user_id == id] <- mean(plays)
}
rm(list = ls())
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting work directory
work.folder <- "/Users/Kozodoi/Documents/Competitions/DSG_2017"
#work.folder <- "C:/Users/kozodoin3.hub/Desktop/D17HU-master"
setwd(work.folder)
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
library(anytime)
# loading functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#        NAIVE MODEL (RATIO)      #
#                                 #
###################################
# loading data sets
load(file.path(data.folder, "data_train.Rda"))
load(file.path(data.folder, "data_test.Rda"))
# keeping the genre data
data.train <- data.train[, c("user_id", "sample_id", "media_id", "is_listened")]
data.test  <- data.test[,  c("user_id", "sample_id", "media_id", "is_listened")]
# empty variables
data.test$play_skip_user <- NA
data.test$play_skip_song <- NA
### computing play/skip ratio of each user
for (id in unique(data.test$user_id)) {
# displaying user ID
print(paste0(which(unique(data.test$user_id) == id), "/", length(unique(data.test$user_id))))
# extracting play/skip history
plays <- data.train$is_listened[data.train$user_id == id]
# saving play/skip ratio
data.test$play_skip_user[data.test$user_id == id] <- mean(plays)
}
