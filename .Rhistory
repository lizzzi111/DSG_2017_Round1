library(data.table)
# loading functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#         DATA PARTITIONING       #
#                                 #
###################################
# loading data set
load(file.path(data.folder, "data_train.Rda"))
# 1) Selecting first 90% history of each user as a training sample
# 2) Selecting last 10% history of each user as a validation sample
dt <- as.data.table(data.train)
dt[,user_listened:=.N, by=user_id]
sam <- dt[user_listened>=100]
sam <- sam[order(ts_listen),.SD, by=user_id]
#sam_train <- sam[, sample(.N, length(.N)*0.1), by=user_id]
sam[, for_val:=round(mean(user_listened)*0.1), by=user_id]
sam[, for_train:=user_listened-for_val, by=user_id]
sam_v <- sam[, tail(.SD, mean(for_val)), by=user_id]
sam_t <- sam[, head(.SD, mean(for_train)), by=user_id]
# delete useless variables
sam_v[, for_val:=NULL]
sam_t[, for_val:=NULL]
sam_v[, for_train:=NULL]
sam_t[, for_train:=NULL]
# convert to data frame
sample.train <- as.data.frame(sam_t)
sample.valid <- as.data.frame(sam_v)
# saving data samples
save(sample.train, file = file.path(data.folder, "sample_train.Rda"))
save(sample.valid, file = file.path(data.folder, "sample_valid.Rda"))
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting work directory
work.folder <- "/Users/Kozodoi/Documents/Competitions/DSG_2017"
#work.folder <- "C:/Users/kozodoin3.hub/Desktop/DSG_2017"
setwd(work.folder)
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
library(anytime)
library(caret)
library(randomForest)
library(xgboost)
# loading functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#         SIMPLE MODELING         #
#                                 #
###################################
# loading original data
load(file.path(data.folder, "data_train.Rda"))
load(file.path(data.folder, "data_test.Rda"))
# loading data samples
load(file.path(data.folder, "sample_train.Rda"))
load(file.path(data.folder, "sample_valid.Rda"))
# computing features [takes 5-10 minutes]
sample.valid <- compute_features(sample.train, sample.valid)
data.test <- compute_features(data.train, data.test)
# model equation
equation <- as.formula(is_listened ~ play_ratio + new_song + new_album + new_artist + new_genre + top_song + top_album + top_artist + top_genre)
# training XGB model [TAKES MUCH TIME]
control <- trainControl(method = "cv", number = 5)
models  <- train(equation, data = sample.valid, method = "xgbLinear", trControl = control)
# predicting unknown data
pred <- predict(models, newdata = data.test, type = "prob")[, "1"]
# creating submission
submit(pred, data = data.test, folder = subm.folder, file = "xgboost_basic.csv")
models
ann.models  <- train(equation, data = sample.valid, method = "nnet",      trControl = control)
control <- trainControl(method = "cv", number = 4)
ann.models <- train(equation, data = sample.valid, method = "nnet",      trControl = control)
ann.models
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting work directory
work.folder <- "/Users/Kozodoi/Documents/Competitions/DSG_2017"
#work.folder <- "C:/Users/kozodoin3.hub/Desktop/DSG_2017"
setwd(work.folder)
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
library(caret)
library(xgboost)
# loading functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#         SIMPLE MODELING         #
#                                 #
###################################
# loading original data
load(file.path(data.folder, "data_train.Rda"))
load(file.path(data.folder, "data_test.Rda"))
# loading data samples
load(file.path(data.folder, "sample_train.Rda"))
load(file.path(data.folder, "sample_valid.Rda"))
# computing features [takes 5-10 minutes]
sample.valid <- compute_features(sample.train, sample.valid)
train = sample.valid
train = sample.train
test = sample.valid
# converting to numeric
train$is_listened <- as.numeric(train$is_listened) - 1
# computing historical play/skip ratios
ratio_per_user   <- aggregate(is_listened ~ user_id,   train, mean)
ratio_per_song   <- aggregate(is_listened ~ media_id,  train, mean)
ratio_per_album  <- aggregate(is_listened ~ album_id,  train, mean)
ratio_per_artist <- aggregate(is_listened ~ artist_id, train, mean)
ratio_per_genre  <- aggregate(is_listened ~ genre_id,  train, mean)
# keeping only played songs
train <- train[train$is_listened == 1, ]
# computing user-specific play counts
user_plays_song   <- aggregate(is_listened ~ user_id + media_id,  train, sum)
user_plays_album  <- aggregate(is_listened ~ user_id + album_id,  train, sum)
user_plays_artist <- aggregate(is_listened ~ user_id + artist_id, train, sum)
user_plays_genre  <- aggregate(is_listened ~ user_id + genre_id,  train, sum)
# computing user-specific top plays [1/2]
user_top_songs   <- aggregate(is_listened ~ user_id, user_plays_song,   max)
user_top_albums  <- aggregate(is_listened ~ user_id, user_plays_album,  max)
user_top_artists <- aggregate(is_listened ~ user_id, user_plays_artist, max)
user_top_genres  <- aggregate(is_listened ~ user_id, user_plays_genre,  max)
# computing user-specific top plays [2/2]
user_top_songs   <- merge(user_top_songs,   user_plays_song,   sort = F, all.x = T)
user_top_albums  <- merge(user_top_albums,  user_plays_album,  sort = F, all.x = T)
user_top_artists <- merge(user_top_artists, user_plays_artist, sort = F, all.x = T)
user_top_genres  <- merge(user_top_genres,  user_plays_genre,  sort = F, all.x = T)
# computing aggregate play counts
total_plays_song   <- aggregate(is_listened ~ media_id,  train, sum)
total_plays_album  <- aggregate(is_listened ~ album_id,  train, sum)
total_plays_artist <- aggregate(is_listened ~ artist_id, train, sum)
total_plays_genre  <- aggregate(is_listened ~ genre_id,  train, sum)
# saving features for play counts and TOPs
test$user_song_plays    <- merge(test[, c("sample_id", "user_id", "media_id")],  user_plays_song,    sort = F, all.x = T)$is_listened
test$user_album_plays   <- merge(test[, c("sample_id", "user_id", "album_id")],  user_plays_album,   sort = F, all.x = T)$is_listened
test$user_artist_plays  <- merge(test[, c("sample_id", "user_id", "artist_id")], user_plays_artist,  sort = F, all.x = T)$is_listened
test$user_genre_plays   <- merge(test[, c("sample_id", "user_id", "genre_id")],  user_plays_genre,   sort = F, all.x = T)$is_listened
test$total_song_plays   <- merge(test[, c("sample_id", "user_id", "media_id")],  total_plays_song,   sort = F, all.x = T)$is_listened
test$total_album_plays  <- merge(test[, c("sample_id", "user_id", "album_id")],  total_plays_album,  sort = F, all.x = T)$is_listened
test$total_artist_plays <- merge(test[, c("sample_id", "user_id", "artist_id")], total_plays_artist, sort = F, all.x = T)$is_listened
test$total_genre_plays  <- merge(test[, c("sample_id", "user_id", "genre_id")],  total_plays_genre,  sort = F, all.x = T)$is_listened
test$user_top_song      <- merge(test[, c("sample_id", "user_id", "media_id")],  user_top_songs,     sort = F, all.x = T)$is_listened
test$user_top_album     <- merge(test[, c("sample_id", "user_id", "album_id")],  user_top_albums,    sort = F, all.x = T)$is_listened
test$user_top_artist    <- merge(test[, c("sample_id", "user_id", "artist_id")], user_top_artists,   sort = F, all.x = T)$is_listened
test$user_top_genre     <- merge(test[, c("sample_id", "user_id", "genre_id")],  user_top_genres,    sort = F, all.x = T)$is_listened
# saving listening dummies
test$user_new_song   <- as.factor(is.na(song_plays))
test$user_new_album  <- as.factor(is.na(album_plays))
test$user_new_artist <- as.factor(is.na(artist_plays))
test$user_new_genre  <- as.factor(is.na(genre_plays))
# converting TOP to dummies
test$user_top_song   <- as.factor(!is.na(song_tops))
test$user_top_album  <- as.factor(!is.na(album_tops))
test$user_top_artist <- as.factor(!is.na(artist_tops))
test$user_top_genre  <- as.factor(!is.na(genre_tops))
# imputing NAs for play counts with true zeroes
test$user_song_plays[is.na(test$user_song_plays)]       <- 0
test$user_album_plays[is.na(test$user_album_plays)]     <- 0
test$user_artist_plays[is.na(test$user_artist_plays)]   <- 0
test$user_genre_plays[is.na(test$user_genre_plays)]     <- 0
test$total_song_plays[is.na(test$total_song_plays)]     <- 0
test$total_album_plays[is.na(test$total_album_plays)]   <- 0
test$total_artist_plays[is.na(test$total_artist_plays)] <- 0
test$total_genre_plays[is.na(test$total_genre_plays)]   <- 0
# saving play ratios
test$ratio_per_user   <- merge(test[, c("sample_id", "user_id")],   ratio_per_user,   sort = F, all.x = T)$is_listened
test$ratio_per_song   <- merge(test[, c("sample_id", "media_id")],  ratio_per_song,   sort = F, all.x = T)$is_listened
test$ratio_per_album  <- merge(test[, c("sample_id", "album_id")],  ratio_per_album,  sort = F, all.x = T)$is_listened
test$ratio_per_artist <- merge(test[, c("sample_id", "artist_id")], ratio_per_artist, sort = F, all.x = T)$is_listened
test$ratio_per_genre  <- merge(test[, c("sample_id", "genre_id")],  ratio_per_genre,  sort = F, all.x = T)$is_listened
test$user_new_song   <- as.factor(is.na(user_song_plays))
test$user_new_album  <- as.factor(is.na(user_album_plays))
test$user_new_artist <- as.factor(is.na(user_artist_plays))
test$user_new_genre  <- as.factor(is.na(user_genre_plays))
test$user_new_song   <- as.factor(is.na(test$user_song_plays))
test$user_new_album  <- as.factor(is.na(test$user_album_plays))
test$user_new_artist <- as.factor(is.na(test$user_artist_plays))
test$user_new_genre  <- as.factor(is.na(test$user_genre_plays))
test$user_top_song   <- as.factor(!is.na(test$user_top_song))
test$user_top_album  <- as.factor(!is.na(test$user_top_album))
test$user_top_artist <- as.factor(!is.na(test$user_top_artist))
test$user_top_genre  <- as.factor(!is.na(test$user_top_genre))
test$user_song_plays[is.na(test$user_song_plays)]       <- 0
test$user_album_plays[is.na(test$user_album_plays)]     <- 0
test$user_artist_plays[is.na(test$user_artist_plays)]   <- 0
test$user_genre_plays[is.na(test$user_genre_plays)]     <- 0
test$total_song_plays[is.na(test$total_song_plays)]     <- 0
test$total_album_plays[is.na(test$total_album_plays)]   <- 0
test$total_artist_plays[is.na(test$total_artist_plays)] <- 0
test$total_genre_plays[is.na(test$total_genre_plays)]   <- 0
test$ratio_per_user   <- merge(test[, c("sample_id", "user_id")],   ratio_per_user,   sort = F, all.x = T)$is_listened
test$ratio_per_song   <- merge(test[, c("sample_id", "media_id")],  ratio_per_song,   sort = F, all.x = T)$is_listened
test$ratio_per_album  <- merge(test[, c("sample_id", "album_id")],  ratio_per_album,  sort = F, all.x = T)$is_listened
test$ratio_per_artist <- merge(test[, c("sample_id", "artist_id")], ratio_per_artist, sort = F, all.x = T)$is_listened
test$ratio_per_genre  <- merge(test[, c("sample_id", "genre_id")],  ratio_per_genre,  sort = F, all.x = T)$is_listened
summary(test)
test = sample.valid
train = sample.train
# converting to numeric
train$is_listened <- as.numeric(train$is_listened) - 1
train$is_skipped  <- 1- train$is_listened
summary(train)
# computing historical play/skip ratios
ratio_per_user   <- aggregate(is_listened ~ user_id,   train, mean)
ratio_per_song   <- aggregate(is_listened ~ media_id,  train, mean)
ratio_per_album  <- aggregate(is_listened ~ album_id,  train, mean)
ratio_per_artist <- aggregate(is_listened ~ artist_id, train, mean)
ratio_per_genre  <- aggregate(is_listened ~ genre_id,  train, mean)
# computing user-specific play counts
user_plays_song   <- aggregate(is_listened ~ user_id + media_id,  train, sum)
user_plays_album  <- aggregate(is_listened ~ user_id + album_id,  train, sum)
user_plays_artist <- aggregate(is_listened ~ user_id + artist_id, train, sum)
user_plays_genre  <- aggregate(is_listened ~ user_id + genre_id,  train, sum)
# computing user-specific skip counts
user_skips_song   <- aggregate(is_skipped ~ user_id + media_id,  train, sum)
user_skips_album  <- aggregate(is_skipped ~ user_id + album_id,  train, sum)
user_skips_artist <- aggregate(is_skipped ~ user_id + artist_id, train, sum)
user_skips_genre  <- aggregate(is_skipped ~ user_id + genre_id,  train, sum)
# computing user-specific top plays [1/2]
user_top_songs   <- aggregate(is_listened ~ user_id, user_plays_song,   max)
user_top_albums  <- aggregate(is_listened ~ user_id, user_plays_album,  max)
user_top_artists <- aggregate(is_listened ~ user_id, user_plays_artist, max)
user_top_genres  <- aggregate(is_listened ~ user_id, user_plays_genre,  max)
# computing user-specific top plays [2/2]
user_top_songs   <- merge(user_top_songs,   user_plays_song,   sort = F, all.x = T)
user_top_albums  <- merge(user_top_albums,  user_plays_album,  sort = F, all.x = T)
user_top_artists <- merge(user_top_artists, user_plays_artist, sort = F, all.x = T)
user_top_genres  <- merge(user_top_genres,  user_plays_genre,  sort = F, all.x = T)
# computing user-specific top skips [1/2]
user_bad_songs   <- aggregate(is_skipped ~ user_id, user_skips_song,   max)
user_bad_albums  <- aggregate(is_skipped ~ user_id, user_skips_album,  max)
user_bad_artists <- aggregate(is_skipped ~ user_id, user_skips_artist, max)
user_bad_genres  <- aggregate(is_skipped ~ user_id, user_skips_genre,  max)
# computing user-specific top skips [2/2]
user_bad_songs   <- merge(user_bad_songs,   user_skips_song,   sort = F, all.x = T)
user_bad_albums  <- merge(user_bad_albums,  user_skips_album,  sort = F, all.x = T)
user_bad_artists <- merge(user_bad_artists, user_skips_artist, sort = F, all.x = T)
user_bad_genres  <- merge(user_bad_genres,  user_skips_genre,  sort = F, all.x = T)
##### 3. FEATURES ON AGGREGATE LEVEL
# computing aggregate play counts
total_plays_song   <- aggregate(is_listened ~ media_id,  train, sum)
total_plays_album  <- aggregate(is_listened ~ album_id,  train, sum)
total_plays_artist <- aggregate(is_listened ~ artist_id, train, sum)
total_plays_genre  <- aggregate(is_listened ~ genre_id,  train, sum)
# computing aggregate skip counts
total_skips_song   <- aggregate(is_skipped ~ media_id,  train, sum)
total_skips_album  <- aggregate(is_skipped ~ album_id,  train, sum)
total_skips_artist <- aggregate(is_skipped ~ artist_id, train, sum)
total_skips_genre  <- aggregate(is_skipped ~ genre_id,  train, sum)
# saving play/skip ratios
test$ratio_per_user   <- merge(test[, c("sample_id", "user_id")],   ratio_per_user,   sort = F, all.x = T)$is_listened
test$ratio_per_song   <- merge(test[, c("sample_id", "media_id")],  ratio_per_song,   sort = F, all.x = T)$is_listened
test$ratio_per_album  <- merge(test[, c("sample_id", "album_id")],  ratio_per_album,  sort = F, all.x = T)$is_listened
test$ratio_per_artist <- merge(test[, c("sample_id", "artist_id")], ratio_per_artist, sort = F, all.x = T)$is_listened
test$ratio_per_genre  <- merge(test[, c("sample_id", "genre_id")],  ratio_per_genre,  sort = F, all.x = T)$is_listened
# saving play and skip counts: user level
test$user_song_plays   <- merge(test[, c("sample_id", "user_id", "media_id")],  user_plays_song,    sort = F, all.x = T)$is_listened
test$user_album_plays  <- merge(test[, c("sample_id", "user_id", "album_id")],  user_plays_album,   sort = F, all.x = T)$is_listened
test$user_artist_plays <- merge(test[, c("sample_id", "user_id", "artist_id")], user_plays_artist,  sort = F, all.x = T)$is_listened
test$user_genre_plays  <- merge(test[, c("sample_id", "user_id", "genre_id")],  user_plays_genre,   sort = F, all.x = T)$is_listened
test$user_song_skips   <- merge(test[, c("sample_id", "user_id", "media_id")],  user_skips_song,    sort = F, all.x = T)$is_listened
test$user_album_skips  <- merge(test[, c("sample_id", "user_id", "album_id")],  user_skips_album,   sort = F, all.x = T)$is_listened
test$user_artist_skips <- merge(test[, c("sample_id", "user_id", "artist_id")], user_skips_artist,  sort = F, all.x = T)$is_listened
test$user_genre_skips  <- merge(test[, c("sample_id", "user_id", "genre_id")],  user_skips_genre,   sort = F, all.x = T)$is_listened
merge(test[, c("sample_id", "user_id", "media_id")],  user_skips_song,   sort = F, all.x = T)$is_listened
merge(test[, c("sample_id", "user_id", "media_id")],  user_skips_song,   sort = F, all.x = T)$is_skipped
test$user_song_skips   <- merge(test[, c("sample_id", "user_id", "media_id")],  user_skips_song,   sort = F, all.x = T)$is_skipped
test$user_album_skips  <- merge(test[, c("sample_id", "user_id", "album_id")],  user_skips_album,  sort = F, all.x = T)$is_skipped
test$user_artist_skips <- merge(test[, c("sample_id", "user_id", "artist_id")], user_skips_artist, sort = F, all.x = T)$is_skipped
test$user_genre_skips  <- merge(test[, c("sample_id", "user_id", "genre_id")],  user_skips_genre,  sort = F, all.x = T)$is_skipped
# saving play and skip counts: aggregate level
test$total_song_plays   <- merge(test[, c("sample_id", "user_id", "media_id")],  total_plays_song,   sort = F, all.x = T)$is_listened
test$total_album_plays  <- merge(test[, c("sample_id", "user_id", "album_id")],  total_plays_album,  sort = F, all.x = T)$is_listened
test$total_artist_plays <- merge(test[, c("sample_id", "user_id", "artist_id")], total_plays_artist, sort = F, all.x = T)$is_listened
test$total_genre_plays  <- merge(test[, c("sample_id", "user_id", "genre_id")],  total_plays_genre,  sort = F, all.x = T)$is_listened
test$total_song_skips   <- merge(test[, c("sample_id", "user_id", "media_id")],  total_skips_song,   sort = F, all.x = T)$is_skipped
test$total_album_skips  <- merge(test[, c("sample_id", "user_id", "album_id")],  total_skips_album,  sort = F, all.x = T)$is_skipped
test$total_artist_skips <- merge(test[, c("sample_id", "user_id", "artist_id")], total_skips_artist, sort = F, all.x = T)$is_skipped
test$total_genre_skips  <- merge(test[, c("sample_id", "user_id", "genre_id")],  total_skips_genre,  sort = F, all.x = T)$is_skipped
# saving TOP and BAD: user level
test$user_top_song   <- merge(test[, c("sample_id", "user_id", "media_id")],  user_top_songs,   sort = F, all.x = T)$is_listened
test$user_top_album  <- merge(test[, c("sample_id", "user_id", "album_id")],  user_top_albums,  sort = F, all.x = T)$is_listened
test$user_top_artist <- merge(test[, c("sample_id", "user_id", "artist_id")], user_top_artists, sort = F, all.x = T)$is_listened
test$user_top_genre  <- merge(test[, c("sample_id", "user_id", "genre_id")],  user_top_genres,  sort = F, all.x = T)$is_listened
test$user_bad_song   <- merge(test[, c("sample_id", "user_id", "media_id")],  user_bad_songs,   sort = F, all.x = T)$is_skipped
test$user_bad_album  <- merge(test[, c("sample_id", "user_id", "album_id")],  user_bad_albums,  sort = F, all.x = T)$is_skipped
test$user_bad_artist <- merge(test[, c("sample_id", "user_id", "artist_id")], user_bad_artists, sort = F, all.x = T)$is_skipped
test$user_bad_genre  <- merge(test[, c("sample_id", "user_id", "genre_id")],  user_bad_genres,  sort = F, all.x = T)$is_skipped
# creating dummies for new media
test$user_new_song   <- as.factor(is.na(test$user_song_plays))
test$user_new_album  <- as.factor(is.na(test$user_album_plays))
test$user_new_artist <- as.factor(is.na(test$user_artist_plays))
test$user_new_genre  <- as.factor(is.na(test$user_genre_plays))
# converting TOP and BAD variables to dummies
test$user_top_song   <- as.factor(!is.na(test$user_top_song))
test$user_top_album  <- as.factor(!is.na(test$user_top_album))
test$user_top_artist <- as.factor(!is.na(test$user_top_artist))
test$user_top_genre  <- as.factor(!is.na(test$user_top_genre))
test$user_bad_song   <- as.factor(!is.na(test$user_bad_song))
test$user_bad_album  <- as.factor(!is.na(test$user_bad_album))
test$user_bad_artist <- as.factor(!is.na(test$user_bad_artist))
test$user_bad_genre  <- as.factor(!is.na(test$user_bad_genre))
# imputing NAs for play and skip counts with true zeroes
test$user_song_plays[is.na(test$user_song_plays)]       <- 0
test$user_album_plays[is.na(test$user_album_plays)]     <- 0
test$user_artist_plays[is.na(test$user_artist_plays)]   <- 0
test$user_genre_plays[is.na(test$user_genre_plays)]     <- 0
test$user_song_skips[is.na(test$user_song_skips)]       <- 0
test$user_album_skips[is.na(test$user_album_skips)]     <- 0
test$user_artist_skips[is.na(test$user_artist_skips)]   <- 0
test$user_genre_skips[is.na(test$user_genre_skips)]     <- 0
test$total_song_plays[is.na(test$total_song_plays)]     <- 0
test$total_album_plays[is.na(test$total_album_plays)]   <- 0
test$total_artist_plays[is.na(test$total_artist_plays)] <- 0
test$total_genre_plays[is.na(test$total_genre_plays)]   <- 0
test$total_song_skips[is.na(test$total_song_skips)]     <- 0
test$total_album_skips[is.na(test$total_album_skips)]   <- 0
test$total_artist_skips[is.na(test$total_artist_skips)] <- 0
test$total_genre_skips[is.na(test$total_genre_skips)]   <- 0
summary(test)
sample.valid <- test
# model equation
equation <- as.formula(is_listened ~ ratio_per_user + ratio_per_song + ratio_per_album + ratio_per_artist + ratio_per_genre +
user_new_song + user_new_album + user_new_artist + user_new_genre +
user_top_song + user_top_album + user_top_artist + user_top_genre +
total_song_plays + total_album_plays + total_artist_plays + total_genre_plays)
rf.model <- randomForest(equation, data = sample.valid, ntree = 10)
summary(sample.valid)
# model equation
equation <- as.formula(is_listened ~ ratio_per_user +
user_new_song + user_new_album + user_new_artist + user_new_genre +
user_top_song + user_top_album + user_top_artist + user_top_genre +
total_song_plays + total_album_plays + total_artist_plays + total_genre_plays +
total_song_skips + total_album_skips + total_artist_skips + total_genre_skips)
rf.model <- randomForest(equation, data = sample.valid, ntree = 10)
rf.model
rf.model <- randomForest(equation, data = sample.valid, ntree = 10, importance = T)
rf.model
plot(rf.model$importance)
rf.model$importance
varImpPlot(rf.model, type=2)
varImpPlot(rf.model, type = 1)
rf.model <- randomForest(equation, data = sample.valid, ntree = 100, importance = T)
# model equation
equation <- as.formula(is_listened ~ ratio_per_user +
user_song_plays + user_album_plays + user_artist_plays + user_genre_plays +
total_song_plays + total_album_plays + total_artist_plays + total_genre_plays +
total_song_skips + total_album_skips + total_artist_skips + total_genre_skips)
rf.model <- randomForest(equation, data = sample.valid, ntree = 10, importance = T)
rf.model
varImpPlot(rf.model, type = 1)
varImpPlot(rf.model, type = 1)
1
equation <- as.formula(is_listened ~ ratio_per_user +
user_song_plays  + user_album_plays  + user_artist_plays  + user_genre_plays +
user_song_skips  + user_album_skips  + user_artist_skips  + user_genre_skips +
total_song_plays + total_album_plays + total_artist_plays + total_genre_plays +
total_song_skips + total_album_skips + total_artist_skips + total_genre_skips)
# training RF model
rf.model <- randomForest(equation, data = sample.valid, ntree = 10, importance = T)
rf.model
# displaying variable importance
varImpPlot(rf.model, type = 1)
# model equations
equation_num <- as.formula(is_listened ~ ratio_per_user +
user_song_plays  + user_album_plays  + user_artist_plays  + user_genre_plays  +
user_song_skips  + user_album_skips  + user_artist_skips  + user_genre_skips  +
total_song_plays + total_album_plays + total_artist_plays + total_genre_plays +
total_song_skips + total_album_skips + total_artist_skips + total_genre_skips)
equation_dum <- as.formula(is_listened ~ ratio_per_user +
user_new_song    + user_new_album    + user_new_artist    + user_new_genre +
user_top_song    + user_top_album    + user_top_artist    + user_top_genre +
user_bad_song    + user_bad_album    + user_bad_artist    + user_bad_genre +
total_song_plays + total_album_plays + total_artist_plays + total_genre_plays +
total_song_skips + total_album_skips + total_artist_skips + total_genre_skips)
# training RF model
rf.model.1 <- randomForest(equation_num, data = sample.valid, ntree = 10, importance = T)
rf.model.2 <- randomForest(equation_dum, data = sample.valid, ntree = 10, importance = T)
rf.model.1
rf.model.2
rf.model.1 -> rf.model_num
rf.model.2 -> rf.model_dum
par(mfrow = c(1,2))
varImpPlot(rf.model_num, type = 1)
varImpPlot(rf.model_dum, type = 1)
# model equation: numeric variables about the user
equation_num <- as.formula(is_listened ~ ratio_per_user +
user_song_plays  + user_album_plays  + user_artist_plays  + user_genre_plays  +
user_song_skips  + user_album_skips  + user_artist_skips  + user_genre_skips  +
total_song_plays + total_album_plays + total_artist_plays + total_genre_plays +
total_song_skips + total_album_skips + total_artist_skips + total_genre_skips)
# model equation: dummy variables about the user
equation_dum <- as.formula(is_listened ~ ratio_per_user +
user_new_song    + user_new_album    + user_new_artist    + user_new_genre +
user_top_song    + user_top_album    + user_top_artist    + user_top_genre +
user_bad_song    + user_bad_album    + user_bad_artist    + user_bad_genre +
total_song_plays + total_album_plays + total_artist_plays + total_genre_plays +
total_song_skips + total_album_skips + total_artist_skips + total_genre_skips)
# training RF models
rf.model_num <- randomForest(equation_num, data = sample.valid, ntree = 100, importance = T)
rf.model_dum <- randomForest(equation_dum, data = sample.valid, ntree = 100, importance = T)
rf.model_num
# imputing NAs for play/skip ratios
sample.valid$ratio_per_song[is.na(sample.valid$ratio_per_song)]     <- mean(sample.valid$ratio_per_song,   na.rm = T)
sample.valid$ratio_per_album[is.na(sample.valid$ratio_per_album)]   <- mean(sample.valid$ratio_per_album,  na.rm = T)
sample.valid$ratio_per_artist[is.na(sample.valid$ratio_per_artist)] <- mean(sample.valid$ratio_per_artist, na.rm = T)
sample.valid$ratio_per_genre[is.na(sample.valid$ratio_per_genre)]   <- mean(sample.valid$ratio_per_genre,  na.rm = T)
# model equation: numeric variables about the user
equation_num <- as.formula(is_listened ~ ratio_per_user + ratio_per_song + ratio_per_album + ratio_per_artist + ratio_per_genre +
user_song_plays  + user_album_plays  + user_artist_plays  + user_genre_plays  +
user_song_skips  + user_album_skips  + user_artist_skips  + user_genre_skips  +
total_song_plays + total_album_plays + total_artist_plays + total_genre_plays +
total_song_skips + total_album_skips + total_artist_skips + total_genre_skips)
rf.model_num <- randomForest(equation_num, data = sample.valid, ntree = 10, importance = T)
rf.model_num
varImpPlot(rf.model_num, type = 1)
equation_num <- as.formula(is_listened ~ ratio_per_user + ratio_per_song + ratio_per_album + ratio_per_artist + ratio_per_genre +
user_song_plays  + user_album_plays  + user_artist_plays  + user_genre_plays  +
user_song_skips  + user_album_skips  + user_artist_skips  + user_genre_skips  +
total_song_plays + total_album_plays + total_artist_plays + total_genre_plays +
total_song_skips + total_album_skips + total_artist_skips + total_genre_skips)
rf.model_num <- randomForest(equation_num, data = sample.valid, ntree = 100, importance = T)
rf.model_num
beep(2)
varImpPlot(rf.model_num, type = 1)
###################################
#                                 #
#             SETTINGS            #
#                                 #
###################################
# clearing the memory
rm(list = ls())
# setting work directory
work.folder <- "/Users/Kozodoi/Documents/Competitions/DSG_2017"
#work.folder <- "C:/Users/kozodoin3.hub/Desktop/DSG_2017"
setwd(work.folder)
# setting inner folders
code.folder <- "codes"
data.folder <- "data"
func.folder <- "functions"
subm.folder <- "submissions"
# loading libraries
library(caret)
library(xgboost)
library(randomForest)
# loading functions
source(file.path(code.folder, "code_0_helper_functions.R"))
###################################
#                                 #
#         SIMPLE MODELING         #
#                                 #
###################################
##### 1. DATA PREPARATIONS
# loading original data
load(file.path(data.folder, "data_train.Rda"))
load(file.path(data.folder, "data_test.Rda"))
# loading data samples
load(file.path(data.folder, "sample_train.Rda"))
load(file.path(data.folder, "sample_valid.Rda"))
# computing features [takes 10-15 minutes]
sample.valid <- compute_features(sample.train, sample.valid)
data.test <- compute_features(data.train, data.test)
##### 2. MODEL ESTIMATIONS
# model equation
equation_num <- as.formula(is_listened ~ ratio_per_user +
user_song_plays  + user_album_plays  + user_artist_plays  + user_genre_plays  +
user_song_skips  + user_album_skips  + user_artist_skips  + user_genre_skips  +
total_song_plays + total_album_plays + total_artist_plays + total_genre_plays +
total_song_skips + total_album_skips + total_artist_skips + total_genre_skips)
rf.model <- randomForest(equation_num, data = sample.valid, ntree = 10, importance = T)
rf.model
rf.model <- randomForest(equation_num, data = sample.valid, ntree = 20, importance = T)
rf.model
varImpPlot(rf.model, type = 1)
par(mfros = c(1,1))
par(mfrow = c(1,1))
varImpPlot(rf.model, type = 1)
rf.model <- randomForest(equation_num, data = sample.valid, ntree = 30, importance = T)
rf.model
varImpPlot(rf.model, type = 1)
rf.model <- randomForest(equation_num, data = sample.valid, ntree = 100, importance = T)
rf.model
varImpPlot(rf.model, type = 1)
rf.model <- randomForest(equation_num, data = sample.valid, ntree = 200, importance = T)
rf.model
varImpPlot(rf.model, type = 1)
library(beepr)
beep(2)
beep(2)
rf.model <- randomForest(equation_num, data = sample.valid, ntree = 300, importance = T)
rf.model
varImpPlot(rf.model, type = 1)
mean(as.numeric(sample.valid$is_listened)-1)
rm(list = ls())
